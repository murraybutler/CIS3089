#BlueJ class context
comment0.params=data
comment0.target=void\ selectionSort(java.lang.Comparable[])
comment0.text=\r\n\ Sorts\ the\ specified\ array\ of\ integers\ using\ the\ selection\r\n\ sort\ algorithm.\r\n\r\n\ @param\ data\ the\ array\ to\ be\ sorted\r\n
comment1.params=data\ index1\ index2
comment1.target=void\ swap(java.lang.Comparable[],\ int,\ int)
comment1.text=\r\n\ Swaps\ to\ elements\ in\ an\ array.\ Used\ by\ various\ sorting\ algorithms.\r\n\ \r\n\ @param\ data\ \ \ the\ array\ in\ which\ the\ elements\ are\ swapped\r\n\ @param\ index1\ the\ index\ of\ the\ first\ element\ to\ be\ swapped\r\n\ @param\ index2\ the\ index\ of\ the\ second\ element\ to\ be\ swapped\r\n
comment2.params=data
comment2.target=void\ insertionSort(java.lang.Comparable[])
comment2.text=\r\n\ Sorts\ the\ specified\ array\ of\ objects\ using\ an\ insertion\r\n\ sort\ algorithm.\r\n\r\n\ @param\ data\ the\ array\ to\ be\ sorted\r\n
comment3.params=data
comment3.target=void\ bubbleSort(java.lang.Comparable[])
comment3.text=\r\n\ Sorts\ the\ specified\ array\ of\ objects\ using\ a\ bubble\ sort\r\n\ algorithm.\r\n\r\n\ @param\ data\ the\ array\ to\ be\ sorted\r\n
comment4.params=data
comment4.target=void\ mergeSort(java.lang.Comparable[])
comment4.text=\r\n\ Sorts\ the\ specified\ array\ of\ objects\ using\ the\ merge\ sort\r\n\ algorithm.\r\n\r\n\ @param\ data\ the\ array\ to\ be\ sorted\r\n
comment5.params=data\ min\ max
comment5.target=void\ mergeSort(java.lang.Comparable[],\ int,\ int)
comment5.text=\r\n\ Recursively\ sorts\ a\ range\ of\ objects\ in\ the\ specified\ array\ using\ the\r\n\ merge\ sort\ algorithm.\r\n\r\n\ @param\ data\ the\ array\ to\ be\ sorted\r\n\ @param\ min\ \ the\ index\ of\ the\ first\ element\ \r\n\ @param\ max\ \ the\ index\ of\ the\ last\ element\r\n
comment6.params=data\ first\ mid\ last
comment6.target=void\ merge(java.lang.Comparable[],\ int,\ int,\ int)
comment6.text=\r\n\ Merges\ two\ sorted\ subarrays\ of\ the\ specified\ array.\r\n\r\n\ @param\ data\ the\ array\ to\ be\ sorted\r\n\ @param\ first\ the\ beginning\ index\ of\ the\ first\ subarray\ \r\n\ @param\ mid\ the\ ending\ index\ fo\ the\ first\ subarray\r\n\ @param\ last\ the\ ending\ index\ of\ the\ second\ subarray\r\n
comment7.params=data
comment7.target=void\ quickSort(java.lang.Comparable[])
comment7.text=\r\n\ Sorts\ the\ specified\ array\ of\ objects\ using\ the\ quick\ sort\ algorithm.\r\n\ \r\n\ @param\ data\ the\ array\ to\ be\ sorted\r\n
comment8.params=data\ min\ max
comment8.target=void\ quickSort(java.lang.Comparable[],\ int,\ int)
comment8.text=\r\n\ Recursively\ sorts\ a\ range\ of\ objects\ in\ the\ specified\ array\ using\ the\r\n\ quick\ sort\ algorithm.\ \r\n\ \r\n\ @param\ data\ the\ array\ to\ be\ sorted\r\n\ @param\ min\ \ the\ minimum\ index\ in\ the\ range\ to\ be\ sorted\r\n\ @param\ max\ \ the\ maximum\ index\ in\ the\ range\ to\ be\ sorted\r\n
comment9.params=data\ min\ max
comment9.target=int\ partition(java.lang.Comparable[],\ int,\ int)
comment9.text=\r\n\ Used\ by\ the\ quick\ sort\ algorithm\ to\ find\ the\ partition.\r\n\ \r\n\ @param\ data\ the\ array\ to\ be\ sorted\r\n\ @param\ min\ \ the\ minimum\ index\ in\ the\ range\ to\ be\ sorted\r\n\ @param\ max\ \ the\ maximum\ index\ in\ the\ range\ to\ be\ sorted\r\n
numComments=10
